name: CI

on:
  pull_request:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bin/rubocop -f github

  test:
    runs-on: ubuntu-latest

    # services:
    #  redis:
    #    image: redis
    #    ports:
    #      - 6379:6379
    #    options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libyaml-dev node-gyp pkg-config python-is-python3 google-chrome-stable unzip

      - name: Install Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: '1.1.42'

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Cache Bootsnap
        uses: actions/cache@v4
        with:
          path: |
            tmp/cache/bootsnap-compile-cache-iseq
            tmp/cache/bootsnap-load-path-cache
          key: ${{ runner.os }}-bootsnap-${{ hashFiles('**/*.rb') }}
          restore-keys: |
            ${{ runner.os }}-bootsnap-

      - name: Cache built assets
        uses: actions/cache@v4
        with:
          path: |
            app/assets/builds/
            public/assets/
          key: ${{ runner.os }}-assets-${{ hashFiles('package.json', 'bun.lockb', 'app/assets/stylesheets/application.tailwind.css', 'app/javascript/**/*.js', 'tailwind.config.js') }}
          restore-keys: |
            ${{ runner.os }}-assets-

      - name: Build assets
        run: |
          bun install
          bun run build
          bun run build:css

      - name: Run tests
        env:
          RAILS_ENV: test
          # REDIS_URL: redis://localhost:6379/0
        run: |
          bin/rails db:create
          bin/rails db:schema:load
          bin/rails test
          bin/rails test:system

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore

  deploy:
    needs: [scan_ruby, lint, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: false

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.KAMAL_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          : > ~/.ssh/known_hosts
          # Scan SSH host keys - fail if unable to verify host
          for t in rsa ecdsa ed25519; do
            if ! ssh-keyscan -T 15 -t $t ${{ secrets.KAMAL_HOST }} >> ~/.ssh/known_hosts 2>/dev/null; then
              echo "Warning: Failed to scan $t key for ${{ secrets.KAMAL_HOST }}"
            fi
          done
          # Ensure at least one key was found
          if ! grep -q "${{ secrets.KAMAL_HOST }}" ~/.ssh/known_hosts; then
            echo "Error: No SSH host keys found for ${{ secrets.KAMAL_HOST }}"
            exit 1
          fi

      - name: Install Kamal
        run: |
          gem install --user-install kamal
          echo "$(ruby -e 'print Gem.user_dir')/bin" >> $GITHUB_PATH

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Deploy with Kamal
        env:
          KAMAL_REGISTRY_PASSWORD: ${{ secrets.KAMAL_REGISTRY_PASSWORD }}
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          KAMAL_HOST: ${{ secrets.KAMAL_HOST }}
          DOCKER_BUILDKIT: 1
        run: |
          # Create Rails master key file for Kamal
          mkdir -p config
          echo "$RAILS_MASTER_KEY" > config/master.key
          chmod 600 config/master.key

          # Create a temporary deploy config with substituted values
          cp config/deploy.yml config/deploy.tmp.yml
          sed -i "s/KAMAL_HOST_PLACEHOLDER/$KAMAL_HOST/g" config/deploy.tmp.yml

          # Deploy directly from GitHub CI using temporary config
          kamal deploy --config-file=config/deploy.tmp.yml

          # Clean up temporary file
          rm config/deploy.tmp.yml
