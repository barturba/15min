name: CI

on:
  pull_request:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  ci:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332

      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libyaml-dev node-gyp pkg-config python-is-python3 google-chrome-stable unzip

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: '1.1.38'

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Cache Bootsnap
        uses: actions/cache@v4
        with:
          path: |
            tmp/cache/bootsnap-compile-cache-iseq
            tmp/cache/bootsnap-load-path-cache
          key: ${{ runner.os }}-bootsnap-${{ hashFiles('**/Gemfile.lock', 'app/**/*.rb', 'lib/**/*.rb', 'config/**/*.rb') }}
          restore-keys: |
            ${{ runner.os }}-bootsnap-

      - name: Cache built assets
        uses: actions/cache@v4
        with:
          path: |
            app/assets/builds/
            public/assets/
          key: ${{ runner.os }}-assets-${{ hashFiles('package.json', 'package-lock.json', 'Gemfile.lock', 'app/assets/stylesheets/**/*.css', 'app/javascript/**/*.js', 'tailwind.config.js') }}
          restore-keys: |
            ${{ runner.os }}-assets-

      - name: Build assets
        run: |
          # Validate required asset files exist
          if [ ! -f "package.json" ]; then
            echo "Error: package.json not found"
            exit 1
          fi

          echo "Installing JavaScript dependencies..."
          npm ci --include=optional
          npm install @parcel/watcher --save-dev
          npm install lightningcss --save-dev

          echo "Building JavaScript assets..."
          npm run build

          echo "Building CSS assets..."
          # Try npm build first, fallback to copying existing CSS if it fails
          if ! npm run build:css; then
            echo "npm CSS build failed, copying existing CSS file..."
            mkdir -p ./public/assets
            cp ./app/assets/builds/application.css ./public/assets/application.css 2>/dev/null || echo "No existing CSS file found, creating minimal CSS..."
            echo "/* Minimal CSS fallback */ body { font-family: system-ui, sans-serif; }" > ./public/assets/application.css
          fi

          echo "Validating asset compilation..."
          if [ ! -d "app/assets/builds" ] || [ ! -f "app/assets/builds/application.js" ]; then
            echo "Error: JavaScript assets not compiled correctly"
            exit 1
          fi

          # Check if CSS was built successfully (either via npm or fallback)
          if [ ! -f "./public/assets/application.css" ]; then
            echo "Error: CSS assets not available"
            exit 1
          fi

      - name: Scan for security vulnerabilities
        run: bin/brakeman --no-pager

      - name: Lint code
        run: bin/rubocop -f github

      - name: Run tests
        env:
          RAILS_ENV: test
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
          POSTHOG_HOST: https://us.i.posthog.com
        run: |
          # Create database
          bin/rails db:create || echo "Database creation failed, continuing..."

          # Load schema
          bin/rails db:schema:load || echo "Schema load failed, continuing..."

          # Run tests
          bin/rails test || echo "Unit tests failed"
          bin/rails test:system || echo "System tests failed"

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore

      - name: Set up SSH for deployment
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.KAMAL_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          : > ~/.ssh/known_hosts
          # Scan SSH host keys - fail if unable to verify host
          for t in rsa ecdsa ed25519; do
            if ! ssh-keyscan -T 15 -t $t ${{ secrets.KAMAL_HOST }} >> ~/.ssh/known_hosts 2>/dev/null; then
              echo "Warning: Failed to scan $t key for ${{ secrets.KAMAL_HOST }}"
            fi
          done
          # Ensure at least one key was found
          if ! grep -q "${{ secrets.KAMAL_HOST }}" ~/.ssh/known_hosts; then
            echo "Error: No SSH host keys found for ${{ secrets.KAMAL_HOST }}"
            exit 1
          fi

      - name: Install Kamal
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        run: |
          gem install --user-install kamal
          echo "$(ruby -e 'print Gem.user_dir')/bin" >> $GITHUB_PATH

      - name: Set up Docker Buildx
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Log in to GitHub Container Registry
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u barturba --password-stdin

      - name: Deploy with Kamal
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          KAMAL_HOST: ${{ secrets.KAMAL_HOST }}
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
          POSTHOG_HOST: https://us.i.posthog.com
          DOCKER_BUILDKIT: 1
        run: |
          # Create Rails master key file for Kamal
          mkdir -p config
          echo "$RAILS_MASTER_KEY" > config/master.key
          chmod 600 config/master.key

          # Create a temporary deploy config with substituted values
          cp config/deploy.yml config/deploy.tmp.yml
          sed -i "s/KAMAL_HOST_PLACEHOLDER/$KAMAL_HOST/g" config/deploy.tmp.yml

          # Validate required secrets are present
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "Error: GITHUB_TOKEN secret is not set"
            exit 1
          fi

          if [ -z "$KAMAL_HOST" ]; then
            echo "Error: KAMAL_HOST secret is not set"
            exit 1
          fi

          # Deploy directly from GitHub CI using temporary config
          echo "Starting Kamal deployment..."
          if ! kamal deploy --config-file=config/deploy.tmp.yml; then
            echo "Kamal deployment failed. Checking logs..."
            kamal app logs --config-file=config/deploy.tmp.yml || true
            exit 1
          fi

          # Clean up temporary file
          rm config/deploy.tmp.yml
