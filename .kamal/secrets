# Secrets defined here are available for reference under registry/password, env/secret, builder/secrets,
# and accessories/*/env/secret in config/deploy.yml. All secrets should be pulled from either
# password manager, ENV, or a file. DO NOT ENTER RAW CREDENTIALS HERE! This file needs to be safe for git.

# Example of extracting secrets from 1password (or another compatible pw manager)
# SECRETS=$(kamal secrets fetch --adapter 1password --account your-account --from Vault/Item KAMAL_REGISTRY_PASSWORD RAILS_MASTER_KEY)
# KAMAL_REGISTRY_PASSWORD=$(kamal secrets extract KAMAL_REGISTRY_PASSWORD ${SECRETS})
# RAILS_MASTER_KEY=$(kamal secrets extract RAILS_MASTER_KEY ${SECRETS})

# Use a GITHUB_TOKEN if private repositories are needed for the image
# GITHUB_TOKEN=$(gh config get -h github.com oauth_token)

# Grab the registry password from ENV with validation
if [ -z "$KAMAL_REGISTRY_PASSWORD" ]; then
  echo "Error: KAMAL_REGISTRY_PASSWORD environment variable is not set"
  exit 1
fi
KAMAL_REGISTRY_PASSWORD=$KAMAL_REGISTRY_PASSWORD

# GitHub token for GHCR authentication (automatically provided by GitHub Actions)
GITHUB_TOKEN=$GITHUB_TOKEN

# Read Rails master key from file with proper validation
if [ ! -f config/master.key ]; then
  echo "Error: config/master.key file not found. Please ensure it exists."
  exit 1
fi
RAILS_MASTER_KEY=$(cat config/master.key)

# Validate that master key is not empty
if [ -z "$RAILS_MASTER_KEY" ]; then
  echo "Error: Rails master key is empty"
  exit 1
fi

# Grab the PostHog API key from ENV with validation
if [ -z "$POSTHOG_API_KEY" ]; then
  echo "Error: POSTHOG_API_KEY environment variable is not set"
  exit 1
fi
POSTHOG_API_KEY=$POSTHOG_API_KEY
